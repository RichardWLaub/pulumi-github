// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    public readonly allowMergeCommit: pulumi.Output<boolean | undefined>;
    public readonly allowRebaseMerge: pulumi.Output<boolean | undefined>;
    public readonly allowSquashMerge: pulumi.Output<boolean | undefined>;
    public readonly archived: pulumi.Output<boolean | undefined>;
    public readonly autoInit: pulumi.Output<boolean | undefined>;
    /**
     * Can only be set after initial repository creation, and only if the target branch exists
     */
    public readonly defaultBranch: pulumi.Output<string>;
    public readonly description: pulumi.Output<string | undefined>;
    public /*out*/ readonly etag: pulumi.Output<string>;
    public /*out*/ readonly fullName: pulumi.Output<string>;
    public /*out*/ readonly gitCloneUrl: pulumi.Output<string>;
    public readonly gitignoreTemplate: pulumi.Output<string | undefined>;
    public readonly hasDownloads: pulumi.Output<boolean | undefined>;
    public readonly hasIssues: pulumi.Output<boolean | undefined>;
    public readonly hasProjects: pulumi.Output<boolean | undefined>;
    public readonly hasWiki: pulumi.Output<boolean | undefined>;
    public readonly homepageUrl: pulumi.Output<string | undefined>;
    public /*out*/ readonly htmlUrl: pulumi.Output<string>;
    public /*out*/ readonly httpCloneUrl: pulumi.Output<string>;
    public readonly licenseTemplate: pulumi.Output<string | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly private: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly sshCloneUrl: pulumi.Output<string>;
    public /*out*/ readonly svnUrl: pulumi.Output<string>;
    public readonly topics: pulumi.Output<string[] | undefined>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: RepositoryState = argsOrState as RepositoryState | undefined;
            inputs["allowMergeCommit"] = state ? state.allowMergeCommit : undefined;
            inputs["allowRebaseMerge"] = state ? state.allowRebaseMerge : undefined;
            inputs["allowSquashMerge"] = state ? state.allowSquashMerge : undefined;
            inputs["archived"] = state ? state.archived : undefined;
            inputs["autoInit"] = state ? state.autoInit : undefined;
            inputs["defaultBranch"] = state ? state.defaultBranch : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["etag"] = state ? state.etag : undefined;
            inputs["fullName"] = state ? state.fullName : undefined;
            inputs["gitCloneUrl"] = state ? state.gitCloneUrl : undefined;
            inputs["gitignoreTemplate"] = state ? state.gitignoreTemplate : undefined;
            inputs["hasDownloads"] = state ? state.hasDownloads : undefined;
            inputs["hasIssues"] = state ? state.hasIssues : undefined;
            inputs["hasProjects"] = state ? state.hasProjects : undefined;
            inputs["hasWiki"] = state ? state.hasWiki : undefined;
            inputs["homepageUrl"] = state ? state.homepageUrl : undefined;
            inputs["htmlUrl"] = state ? state.htmlUrl : undefined;
            inputs["httpCloneUrl"] = state ? state.httpCloneUrl : undefined;
            inputs["licenseTemplate"] = state ? state.licenseTemplate : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["private"] = state ? state.private : undefined;
            inputs["sshCloneUrl"] = state ? state.sshCloneUrl : undefined;
            inputs["svnUrl"] = state ? state.svnUrl : undefined;
            inputs["topics"] = state ? state.topics : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            inputs["allowMergeCommit"] = args ? args.allowMergeCommit : undefined;
            inputs["allowRebaseMerge"] = args ? args.allowRebaseMerge : undefined;
            inputs["allowSquashMerge"] = args ? args.allowSquashMerge : undefined;
            inputs["archived"] = args ? args.archived : undefined;
            inputs["autoInit"] = args ? args.autoInit : undefined;
            inputs["defaultBranch"] = args ? args.defaultBranch : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["gitignoreTemplate"] = args ? args.gitignoreTemplate : undefined;
            inputs["hasDownloads"] = args ? args.hasDownloads : undefined;
            inputs["hasIssues"] = args ? args.hasIssues : undefined;
            inputs["hasProjects"] = args ? args.hasProjects : undefined;
            inputs["hasWiki"] = args ? args.hasWiki : undefined;
            inputs["homepageUrl"] = args ? args.homepageUrl : undefined;
            inputs["licenseTemplate"] = args ? args.licenseTemplate : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["private"] = args ? args.private : undefined;
            inputs["topics"] = args ? args.topics : undefined;
            inputs["etag"] = undefined /*out*/;
            inputs["fullName"] = undefined /*out*/;
            inputs["gitCloneUrl"] = undefined /*out*/;
            inputs["htmlUrl"] = undefined /*out*/;
            inputs["httpCloneUrl"] = undefined /*out*/;
            inputs["sshCloneUrl"] = undefined /*out*/;
            inputs["svnUrl"] = undefined /*out*/;
        }
        super("github:index/repository:Repository", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    readonly allowMergeCommit?: pulumi.Input<boolean>;
    readonly allowRebaseMerge?: pulumi.Input<boolean>;
    readonly allowSquashMerge?: pulumi.Input<boolean>;
    readonly archived?: pulumi.Input<boolean>;
    readonly autoInit?: pulumi.Input<boolean>;
    /**
     * Can only be set after initial repository creation, and only if the target branch exists
     */
    readonly defaultBranch?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly etag?: pulumi.Input<string>;
    readonly fullName?: pulumi.Input<string>;
    readonly gitCloneUrl?: pulumi.Input<string>;
    readonly gitignoreTemplate?: pulumi.Input<string>;
    readonly hasDownloads?: pulumi.Input<boolean>;
    readonly hasIssues?: pulumi.Input<boolean>;
    readonly hasProjects?: pulumi.Input<boolean>;
    readonly hasWiki?: pulumi.Input<boolean>;
    readonly homepageUrl?: pulumi.Input<string>;
    readonly htmlUrl?: pulumi.Input<string>;
    readonly httpCloneUrl?: pulumi.Input<string>;
    readonly licenseTemplate?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly private?: pulumi.Input<boolean>;
    readonly sshCloneUrl?: pulumi.Input<string>;
    readonly svnUrl?: pulumi.Input<string>;
    readonly topics?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    readonly allowMergeCommit?: pulumi.Input<boolean>;
    readonly allowRebaseMerge?: pulumi.Input<boolean>;
    readonly allowSquashMerge?: pulumi.Input<boolean>;
    readonly archived?: pulumi.Input<boolean>;
    readonly autoInit?: pulumi.Input<boolean>;
    /**
     * Can only be set after initial repository creation, and only if the target branch exists
     */
    readonly defaultBranch?: pulumi.Input<string>;
    readonly description?: pulumi.Input<string>;
    readonly gitignoreTemplate?: pulumi.Input<string>;
    readonly hasDownloads?: pulumi.Input<boolean>;
    readonly hasIssues?: pulumi.Input<boolean>;
    readonly hasProjects?: pulumi.Input<boolean>;
    readonly hasWiki?: pulumi.Input<boolean>;
    readonly homepageUrl?: pulumi.Input<string>;
    readonly licenseTemplate?: pulumi.Input<string>;
    readonly name: pulumi.Input<string>;
    readonly private?: pulumi.Input<boolean>;
    readonly topics?: pulumi.Input<pulumi.Input<string>[]>;
}
