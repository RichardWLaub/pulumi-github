// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package github

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a GitHub user's GPG key resource.
// 
// This resource allows you to add/remove GPG keys from your user account.
type UserGpgKey struct {
	s *pulumi.ResourceState
}

// NewUserGpgKey registers a new resource with the given unique name, arguments, and options.
func NewUserGpgKey(ctx *pulumi.Context,
	name string, args *UserGpgKeyArgs, opts ...pulumi.ResourceOpt) (*UserGpgKey, error) {
	if args == nil || args.ArmoredPublicKey == nil {
		return nil, errors.New("missing required argument 'ArmoredPublicKey'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["armoredPublicKey"] = nil
	} else {
		inputs["armoredPublicKey"] = args.ArmoredPublicKey
	}
	inputs["etag"] = nil
	inputs["keyId"] = nil
	s, err := ctx.RegisterResource("github:index/userGpgKey:UserGpgKey", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserGpgKey{s: s}, nil
}

// GetUserGpgKey gets an existing UserGpgKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGpgKey(ctx *pulumi.Context,
	name string, id pulumi.ID, state *UserGpgKeyState, opts ...pulumi.ResourceOpt) (*UserGpgKey, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["armoredPublicKey"] = state.ArmoredPublicKey
		inputs["etag"] = state.Etag
		inputs["keyId"] = state.KeyId
	}
	s, err := ctx.ReadResource("github:index/userGpgKey:UserGpgKey", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &UserGpgKey{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *UserGpgKey) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *UserGpgKey) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Your pulic GPG key, generated in ASCII-armored format.
// See [Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/) for help on creating a GPG key.
func (r *UserGpgKey) ArmoredPublicKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["armoredPublicKey"])
}

func (r *UserGpgKey) Etag() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["etag"])
}

// The key ID of the GPG key, e.g. `3262EFF25BA0D270`
func (r *UserGpgKey) KeyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["keyId"])
}

// Input properties used for looking up and filtering UserGpgKey resources.
type UserGpgKeyState struct {
	// Your pulic GPG key, generated in ASCII-armored format.
	// See [Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/) for help on creating a GPG key.
	ArmoredPublicKey interface{}
	Etag interface{}
	// The key ID of the GPG key, e.g. `3262EFF25BA0D270`
	KeyId interface{}
}

// The set of arguments for constructing a UserGpgKey resource.
type UserGpgKeyArgs struct {
	// Your pulic GPG key, generated in ASCII-armored format.
	// See [Generating a new GPG key](https://help.github.com/articles/generating-a-new-gpg-key/) for help on creating a GPG key.
	ArmoredPublicKey interface{}
}
